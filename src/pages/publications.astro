---
import DefaultLayout from "../layouts/DefaultLayout.astro";
import PublicationCard from "../components/PublicationCard.astro";

interface ADSDoc {
  bibcode: string;
  title?: string | string[];
  pub?: string;
  year?: number | string;
}

interface Publication {
  title: string;
  journal: string;
  link: string;
}

const ADS_API_KEY = import.meta.env.ADS_API_KEY;
const LIBRARY_ID = "q7ce2driS9W-SkN3IcOqNA";

async function fetchPublications(): Promise<Publication[]> {
  const params = new URLSearchParams({
    fl: "bibcode,title,pub,year",
    rows: "50",
    sort: "date desc",
  });

  const res = await fetch(
    `https://api.adsabs.harvard.edu/v1/biblib/libraries/${LIBRARY_ID}?${params}`,
    {
      headers: {
        Authorization: `Bearer ${ADS_API_KEY}`,
        Accept: "application/json",
      },
    }
  );
  if (!res.ok) {
    console.error("Error ADS:", await res.text());
    return [];
  }

  const { solr } = (await res.json()) as {
    solr: { response: { docs: ADSDoc[] } };
  };

  return solr.response.docs.map((doc): Publication => {
    // 1) Narrowing de title a string siempre
    let titleStr: string;
    if (Array.isArray(doc.title) && doc.title.length > 0) {
      titleStr = doc.title[0];
    } else if (typeof doc.title === "string") {
      titleStr = doc.title;
    } else {
      titleStr = doc.bibcode;
    }

    // 2) Narrowing de journal a string
    const journalStr =
      doc.pub && doc.year ? `${doc.pub}, ${doc.year}` : (doc.pub ?? "");

    const link = `https://ui.adsabs.harvard.edu/abs/${doc.bibcode}/abstract`;

    return {
      title: titleStr,
      journal: journalStr,
      link,
    };
  });
}

const publications = await fetchPublications();
---

<DefaultLayout>
  <h2 class="text-3xl font-bold mb-4">Publicaciones</h2>
  <div class="space-y-4">
    {
      publications.map((pub) => (
        <PublicationCard
          title={pub.title}
          journal={pub.journal}
          link={pub.link}
        />
      ))
    }
  </div>
</DefaultLayout>
